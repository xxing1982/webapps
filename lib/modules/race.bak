var config = require("../../config").values
var util = require("./util");
//var socket = require("./socket");
var racemodel = require("./racemodel");

function getRandomInt (min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function Operation () {
	var self = this;
	var member1 = getRandomInt(0,20);
	var member2 = getRandomInt(0,20);

	var operation_type = getRandomInt(0,1) ? '+' : '-'; //build the match challenge.
	self.quest =  member1 + operation_type + member2;
	self.solution = eval (self.quest);
}
exports.Operation = Operation;

function createRace(io){
	var clients = {}; //id (int) : socket (obj)
	var sessions = []; //array of socket id's
//	var scores = {};
//	var history = [];
//	var hall_of_fame = [];

//	function UpdateHallOfFame(scores, timestamp){
//
//		for (var i = 0, l = scores.length; i < l ;  i++) {
//			var score = scores[i];
//			score.timestamp = timestamp;
//			hall_of_fame.push(score); //add all scores
//        }
//        //sort by score
//		util.sort(hall_of_fame, 'score', true);
//
//		//and slice array!
//		return hall_of_fame.slice(0, config.game.show_hall_of_fame);
//	}

	function broadcast(sessions, command, data, exception){
		for (var i=0, l=sessions.length; i < l ; i++) {
			if (!exception || sessions[i] != exception)
				clients[sessions[i]].emit(command, data);
        }
    }

	var operation = new Operation();

//	function format_scores (scores){
//	   var arr = [];
//	   for(var key in scores){
//	      arr.push({player: key, score : scores[key]});
//	   }
//	   return arr;
//	}

	var game_duration = config.game.duration * 1000;
	var game_started = new Date();

	setInterval(function broadcastTime(){
		var elapsed = new Date().getTime() - game_started.getTime();
		var remaining = Math.floor((game_duration - elapsed) / 1000);
		if (remaining<0){
			//archive game
			var timestamp = game_started.getDate() + '/' + (game_started.getMonth() + 1) + '/' + game_started.getFullYear() + ' ' +  game_started.getHours() + ":" + (game_started.getMinutes() > 9 ? game_started.getMinutes() : '0' + game_started.getMinutes());
//			if (util.format_scores(scores).length){
			if (util.format_scores(racemodel.getScores()).length){
                racemodel.setHistory(game_started.getTime(), timestamp, util.format_scores(racemodel.getScores()));
//				history.push({
//					timestamp: game_started.getTime(),
//					name: timestamp,
//					scores: util.format_scores(scores)
//				});
//
//				util.sort(history, 'timestamp', true);
//				history = history.slice(0, config.game.show_history_games);

//				hall_of_fame = UpdateHallOfFame(util.format_scores(scores), timestamp);
                racemodel.setHallOfFame(timestamp, util.format_scores(racemodel.getScores()));

//				broadcast (sessions, 'history', history); //broadcast history
                broadcast (sessions, 'history', racemodel.getHistory()); //broadcast history

            }
//			scores = {}; //reset
            racemodel.resetScores();

			game_started = new Date(); //start game again!
//			broadcast (sessions, 'scores', util.format_scores(scores)); //broadcast scores
//			broadcast (sessions, 'hall_of_fame', hall_of_fame); //broadcast "hall of fame"
			broadcast (sessions, 'scores', util.format_scores(racemodel.getScores())); //broadcast scores
			broadcast (sessions, 'hall_of_fame', racemodel.getHallOfFame()); //broadcast "hall of fame"
			broadcast (sessions, 'new_game', null); //flash 'new game!'
		}
		else
			broadcast (sessions, 'time', remaining); //broacast time ticks

	}, 1000);

//    socket.newSocket(io, sessions, clients, operation, racemodel.getScores(), racemodel.getHistory(), racemodel.getHallOfFame());
	io.on('connection', function (socket) {
        socket.on('disconnect', function () {
			for (var i = 0, l = sessions.length; i < l ;  i++) {
				if (sessions[i]==socket.id){
					delete clients[socket.id];
					sessions.splice(i,1);
					break;
				}
			};
		});

        socket.on('join', function (data) {
			util.add (sessions, socket.id); //add socket id to list of sessions
			clients[socket.id] = socket;  //store specific socket object
            socket.emit ('new_operation', operation.quest); //send challenge to new socket
//            socket.emit ('scores', util.format_scores(scores)); //send scores to new socket
//            socket.emit ('history', history); //send history
//			broadcast (sessions, 'hall_of_fame', hall_of_fame); //send hall of fame
            socket.emit ('scores', util.format_scores(racemodel.getScores())); //send scores to new socket
            socket.emit ('history', racemodel.getHistory()); //send history
			broadcast (sessions, 'hall_of_fame', racemodel.getHallOfFame()); //send hall of fame
        });

        socket.on('solve_operation', function (data) {
			if (data.operation == operation.solution){
				//result_operation: 1:you win, 2:other player won, 0: bad operation
                socket.emit ('result_operation', 1); //msg to winner
				broadcast (sessions, 'result_operation', 2, socket.id); //msg to rest of players. someone else won!

				var safe_name = data.name.slice(0,25); //avoid long names
                var scores = {};
                scores = racemodel.getScores();
				scores[safe_name] = (scores[safe_name] || 0) + 1; //credit score to socket
                racemodel.setScores(scores);
				broadcast (sessions, 'scores', util.format_scores(racemodel.getScores())); //broacast scores
//				scores[safe_name] = (scores[safe_name] || 0) + 1; //credit score to socket
//				broadcast (sessions, 'scores', util.format_scores(scores)); //broacast scores

				//new challenge
				operation =  new Operation();
				broadcast (sessions, 'new_operation', operation.quest); //new challenge for all players
			}
			else //baaaad. you need some math classes
                socket.emit ('result_operation', 0);
		});
	});
}
exports.createRace = createRace;
